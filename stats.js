class SudokuStats {
    constructor() {
        this.storageKey = 'sudokuStats_v1'; // –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        this.stats = this.loadStats();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ localStorage —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    loadStats() {
        try {
            const savedStats = localStorage.getItem(this.storageKey);
            if (savedStats) {
                const parsed = JSON.parse(savedStats);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if (parsed && typeof parsed === 'object') {
                    return {
                        easy: Array.isArray(parsed.easy) ? parsed.easy : [],
                        medium: Array.isArray(parsed.medium) ? parsed.medium : [],
                        hard: Array.isArray(parsed.hard) ? parsed.hard : []
                    };
                }
            }
        } catch (e) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é');
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            easy: [],
            medium: [],
            hard: []
        };
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage
    saveStats() {
        try {
            localStorage.setItem(this.storageKey, JSON.stringify(this.stats));
        } catch (e) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –º–µ—Å—Ç–æ)');
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    addRecord(difficulty, timeInSeconds, moves) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if (!['easy', 'medium', 'hard'].includes(difficulty)) {
            console.log('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:', difficulty);
            return;
        }

        const record = {
            id: Date.now(),
            date: new Date().toLocaleDateString('ru-RU'),
            time: Math.max(0, timeInSeconds), // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            moves: Math.max(0, moves), // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            timestamp: Date.now()
        };

        this.stats[difficulty].push(record);
        this.sortStats();
        this.saveStats();
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    sortStats() {
        Object.keys(this.stats).forEach(difficulty => {
            this.stats[difficulty].sort((a, b) => {
                // –°–Ω–∞—á–∞–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–º–µ–Ω—å—à–µ - –ª—É—á—à–µ)
                if (a.time !== b.time) {
                    return a.time - b.time;
                }
                // –ó–∞—Ç–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ö–æ–¥–æ–≤ (–º–µ–Ω—å—à–µ - –ª—É—á—à–µ)
                return a.moves - b.moves;
            });
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    getStatsForDifficulty(difficulty) {
        return this.stats[difficulty] || [];
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    getAllStats() {
        return this.stats;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫—É
    formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    generateStatsHTML() {
        let html = `
            <div class="stats-modal">
                <div class="stats-content">
                    <div class="stats-header">
                        <h2>üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä</h2>
                        <button class="close-stats" id="closeStats">√ó</button>
                    </div>
                    <div class="stats-body">
        `;

        const difficulties = {
            'easy': '–õ–µ–≥–∫–æ',
            'medium': '–°—Ä–µ–¥–Ω–µ', 
            'hard': '–°–ª–æ–∂–Ω–æ'
        };

        Object.keys(difficulties).forEach(difficulty => {
            const records = this.getStatsForDifficulty(difficulty);
            html += `
                <div class="difficulty-section">
                    <h3>${difficulties[difficulty]} (${records.length})</h3>
                    ${records.length > 0 ? `
                        <div class="stats-table">
                            <div class="table-header">
                                <div class="table-cell">–î–∞—Ç–∞</div>
                                <div class="table-cell">–í—Ä–µ–º—è</div>
                                <div class="table-cell">–•–æ–¥—ã</div>
                                <div class="table-cell">–†–µ–π—Ç–∏–Ω–≥</div>
                            </div>
                            ${records.slice(0, 10).map((record, index) => `
                                <div class="table-row ${index === 0 ? 'best-record' : ''}">
                                    <div class="table-cell">${record.date}</div>
                                    <div class="table-cell">${this.formatTime(record.time)}</div>
                                    <div class="table-cell">${record.moves}</div>
                                    <div class="table-cell">${index + 1}</div>
                                </div>
                            `).join('')}
                        </div>
                    ` : '<div class="no-records">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</div>'}
                </div>
            `;
        });

        html += `
                    </div>
                </div>
            </div>
        `;

        return html;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    showStats() {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingModal = document.querySelector('.stats-modal');
        if (existingModal) {
            existingModal.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const statsHTML = this.generateStatsHTML();
        document.body.insertAdjacentHTML('beforeend', statsHTML);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = document.getElementById('closeStats');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                document.querySelector('.stats-modal').remove();
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modal = document.querySelector('.stats-modal');
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    clearAllStats() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?')) {
            this.stats = {
                easy: [],
                medium: [],
                hard: []
            };
            this.saveStats();
            this.showStats(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)
    exportStats() {
        const dataStr = JSON.stringify(this.stats, null, 2);
        const dataBlob = new Blob([dataStr], {type: 'application/json'});
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'sudoku-stats-export.json';
        link.click();
        URL.revokeObjectURL(url);
    }

    // –ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    importStats(jsonString) {
        try {
            const importedStats = JSON.parse(jsonString);
            if (importedStats && typeof importedStats === 'object') {
                this.stats = {
                    easy: Array.isArray(importedStats.easy) ? importedStats.easy : [],
                    medium: Array.isArray(importedStats.medium) ? importedStats.medium : [],
                    hard: Array.isArray(importedStats.hard) ? importedStats.hard : []
                };
                this.sortStats();
                this.saveStats();
                return true;
            }
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', e);
        }
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.SudokuStats = SudokuStats;